[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pse-llm"
version = "1.0.0"
description = "Python Strategy Engine with LLM Integration for Quantitative Trading"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Trading Team", email = "team@example.com"},
]
keywords = ["trading", "quantitative", "llm", "futures", "backtesting"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typing-extensions>=4.8.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "numba>=0.58.0",
    "pyarrow>=14.0.0",
    "duckdb>=0.9.0",
    "polars>=0.19.0",

    # LLM and HTTP
    "httpx>=0.25.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",

    # CLI and UI
    "typer>=0.9.0",
    "rich>=13.7.0",
    "loguru>=0.7.0",

    # Data providers
    "ib-insync>=0.9.86",
    "polygon-api-client>=1.13.0",
    "databento>=0.20.0",

    # Development and testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.88.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pre-commit>=3.5.0",

    # Optional production dependencies
    "redis>=5.0.0",
    "python-dateutil>=2.8.0",
]

[project.scripts]
pse = "cli.main:app"

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
    "tox>=4.11.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings>=0.24.0",
]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.*",
    "/tests",
    "/docs",
    "/Makefile",
    "/.pre-commit-config.yaml",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ib_insync.*",
    "databento.*",
    "polygon.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B011"]  # assert false

[tool.ruff.isort]
known-first-party = ["pse_llm"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=pse_llm",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pse_llm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]